import { useState } from 'react';

interface Props {
  onLoginSuccess: (userId: string, login: string, role?: 'user' | 'admin') => void;
}

export function LoginPage({ onLoginSuccess }: Props) {
  const [isRegistering, setIsRegistering] = useState(false);
  const [login, setLogin] = useState('');
  const [password, setPassword] = useState('');
  const [teamName, setTeamName] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      const endpoint = isRegistering ? '/api/auth/register' : '/api/auth/login';
      const body: any = { login, password };
      if (isRegistering) {
        body.teamName = teamName || login + "'s Team";
        body.logo = 'default-logo';
      }

      const res = await fetch(`http://localhost:3001${endpoint}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(body),
      });

      const data = await res.json();

      if (res.ok) {
        onLoginSuccess(data.userId, data.login, data.role);
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="page-centered animate-fade-in">
      <div className="card max-w-md w-full animate-slide-up" style={{ maxWidth: '440px' }}>
        <div className="card-header text-center">
          <h1 style={{ fontSize: '2.5rem', fontWeight: '700', marginBottom: '0.5rem', background: 'linear-gradient(135deg, #3b82f6, #06b6d4)', WebkitBackgroundClip: 'text', WebkitTextFillColor: 'transparent' }}>
            üèí Fantasy Draft
          </h1>
          <p className="card-subtitle" style={{ fontSize: '1rem' }}>
            {isRegistering ? '–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞' : '–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É'}
          </p>
        </div>

        <div className="card-body">
          {error && (
            <div className="alert alert-danger animate-slide-up" style={{ marginBottom: '1.5rem' }}>
              ‚ö†Ô∏è {error}
            </div>
          )}

          <form onSubmit={handleSubmit}>
            <div className="form-group">
              <label className="form-label">–õ–æ–≥–∏–Ω</label>
              <input
                type="text"
                className="form-input"
                value={login}
                onChange={(e) => setLogin(e.target.value)}
                required
                disabled={loading}
                autoComplete="username"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"
              />
            </div>

            <div className="form-group">
              <label className="form-label">–ü–∞—Ä–æ–ª—å</label>
              <input
                type="password"
                className="form-input"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                disabled={loading}
                autoComplete={isRegistering ? 'new-password' : 'current-password'}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              />
            </div>

            {isRegistering && (
              <div className="form-group">
                <label className="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                <input
                  type="text"
                  className="form-input"
                  value={teamName}
                  onChange={(e) => setTeamName(e.target.value)}
                  disabled={loading}
                  placeholder={login ? `${login}'s Team` : '–ú–æ—è –∫–æ–º–∞–Ω–¥–∞'}
                />
                <div className="form-help">–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è</div>
              </div>
            )}

            <button 
              type="submit" 
              className="btn btn-primary btn-lg btn-block" 
              disabled={loading}
              style={{ marginTop: '1.5rem' }}
            >
              {loading ? '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...' : isRegistering ? 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : 'üîë –í–æ–π—Ç–∏'}
            </button>
          </form>
        </div>

        <div className="card-footer text-center">
          <button
            type="button"
            className="btn btn-ghost"
            onClick={() => {
              setIsRegistering(!isRegistering);
              setError('');
            }}
            disabled={loading}
          >
            {isRegistering ? '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏ ‚Üí' : '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚Üí'}
          </button>
        </div>
      </div>
    </div>
  );
}
