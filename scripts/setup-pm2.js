#!/usr/bin/env node
/**
 * PM2 Setup Script
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ PM2 –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:
 * - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PM2 (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
 * - –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
 * - –ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
 * - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

const ROOT = path.resolve(__dirname, '..');
const LOGS_DIR = path.join(ROOT, 'logs');

const isWin = process.platform === 'win32';
const npmCmd = isWin ? 'npm.cmd' : 'npm';

function log(msg) {
  console.log(`[setup-pm2] ${msg}`);
}

function error(msg) {
  console.error(`[setup-pm2] ‚ùå ${msg}`);
}

function success(msg) {
  console.log(`[setup-pm2] ‚úÖ ${msg}`);
}

function exec(cmd) {
  try {
    return execSync(cmd, { encoding: 'utf8', stdio: 'pipe' });
  } catch (err) {
    return null;
  }
}

function checkPm2Installed() {
  const result = exec('pm2 --version');
  return result !== null;
}

function installPm2() {
  log('PM2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≥–ª–æ–±–∞–ª—å–Ω–æ...');
  try {
    execSync('npm install -g pm2', { stdio: 'inherit' });
    success('PM2 —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return true;
  } catch (err) {
    error('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PM2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: npm install -g pm2');
    return false;
  }
}

function createLogsDirectory() {
  if (!fs.existsSync(LOGS_DIR)) {
    fs.mkdirSync(LOGS_DIR, { recursive: true });
    success(`–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤: ${LOGS_DIR}`);
  } else {
    log(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${LOGS_DIR}`);
  }
}

function setupLogrotate() {
  log('–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤...');
  try {
    execSync('pm2 install pm2-logrotate', { stdio: 'inherit' });
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏: —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π, —Ä–æ—Ç–∞—Ü–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    execSync('pm2 set pm2-logrotate:max_size 10M', { stdio: 'pipe' });
    execSync('pm2 set pm2-logrotate:retain 7', { stdio: 'pipe' });
    execSync('pm2 set pm2-logrotate:compress true', { stdio: 'pipe' });
    success('–†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (10MB, 7 –¥–Ω–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è)');
  } catch (err) {
    error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤');
  }
}

async function askAutostart() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  return new Promise((resolve) => {
    rl.question('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã? (y/n): ', (answer) => {
      rl.close();
      resolve(answer.toLowerCase() === 'y');
    });
  });
}

function setupAutostart() {
  log('–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã...');
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é PM2
    execSync('pm2 save', { stdio: 'pipe' });
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º startup script
    const startupCmd = exec('pm2 startup');
    if (startupCmd && startupCmd.includes('sudo')) {
      log('–î–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
      console.log(startupCmd);
    } else {
      success('–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
  } catch (err) {
    error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫');
  }
}

function showQuickStart() {
  console.log('\n' + '='.repeat(60));
  console.log('üéâ PM2 –ù–ê–°–¢–†–û–ï–ù! –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢:');
  console.log('='.repeat(60));
  console.log('');
  console.log('üì¶ –†–ê–ó–†–ê–ë–û–¢–ö–ê (dev):');
  console.log('   npm run pm2:start       - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã');
  console.log('   npm run pm2:status      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å');
  console.log('   npm run pm2:logs        - –°–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏');
  console.log('   npm run pm2:stop        - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—ë');
  console.log('');
  console.log('üöÄ PRODUCTION:');
  console.log('   npm run pm2:prod        - –°–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å');
  console.log('   npm run pm2:prod:stop   - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å');
  console.log('');
  console.log('üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì:');
  console.log('   npm run pm2:monitor     - –û—Ç–∫—Ä—ã—Ç—å dashboard');
  console.log('   npm run pm2:logs:error  - –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏');
  console.log('');
  console.log('üìÇ –õ–û–ì–ò –°–û–•–†–ê–ù–Ø–Æ–¢–°–Ø –í: ./logs/');
  console.log('='.repeat(60));
}

async function main() {
  console.log('');
  log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PM2 –¥–ª—è Fantasy Draft App...');
  console.log('');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ PM2
  if (!checkPm2Installed()) {
    if (!installPm2()) {
      process.exit(1);
    }
  } else {
    success('PM2 —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤
  createLogsDirectory();

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
  setupLogrotate();

  // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  console.log('');
  const shouldAutostart = await askAutostart();
  if (shouldAutostart) {
    setupAutostart();
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º quick start
  showQuickStart();
  
  console.log('');
  success('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm run pm2:start');
  console.log('');
}

main().catch(err => {
  error(`–û—à–∏–±–∫–∞: ${err.message}`);
  process.exit(1);
});
